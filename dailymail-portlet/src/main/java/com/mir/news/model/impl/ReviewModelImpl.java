package com.mir.news.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.mir.news.model.Review;
import com.mir.news.model.ReviewModel;
import com.mir.news.model.ReviewSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Review service. Represents a row in the &quot;review&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.mir.news.model.ReviewModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReviewImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReviewImpl
 * @see com.mir.news.model.Review
 * @see com.mir.news.model.ReviewModel
 * @generated
 */
@JSON(strict = true)
public class ReviewModelImpl extends BaseModelImpl<Review>
    implements ReviewModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a review model instance should use the {@link com.mir.news.model.Review} interface instead.
     */
    public static final String TABLE_NAME = "review";
    public static final Object[][] TABLE_COLUMNS = {
            { "reviewId", Types.BIGINT },
            { "reviewerId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "text_", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table review (reviewId LONG not null primary key,reviewerId LONG,name VARCHAR(75) null,text_ VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table review";
    public static final String ORDER_BY_JPQL = " ORDER BY review.reviewId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY review.reviewId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.mir.news.model.Review"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.mir.news.model.Review"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final String MAPPING_TABLE_DAILYMAIL_ARTICLES_REVIEWS_NAME = "dailymail_Articles_Reviews";
    public static final Object[][] MAPPING_TABLE_DAILYMAIL_ARTICLES_REVIEWS_COLUMNS =
        {
            { "articleId", Types.BIGINT },
            { "reviewId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_DAILYMAIL_ARTICLES_REVIEWS_SQL_CREATE =
        "create table dailymail_Articles_Reviews (articleId LONG not null,reviewId LONG not null,primary key (articleId, reviewId))";
    public static final boolean FINDER_CACHE_ENABLED_DAILYMAIL_ARTICLES_REVIEWS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.dailymail_Articles_Reviews"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.mir.news.model.Review"));
    private static ClassLoader _classLoader = Review.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Review.class };
    private long _reviewId;
    private long _reviewerId;
    private String _name;
    private String _text;
    private Review _escapedModel;

    public ReviewModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Review toModel(ReviewSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Review model = new ReviewImpl();

        model.setReviewId(soapModel.getReviewId());
        model.setReviewerId(soapModel.getReviewerId());
        model.setName(soapModel.getName());
        model.setText(soapModel.getText());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Review> toModels(ReviewSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Review> models = new ArrayList<Review>(soapModels.length);

        for (ReviewSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _reviewId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setReviewId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _reviewId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Review.class;
    }

    @Override
    public String getModelClassName() {
        return Review.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("reviewId", getReviewId());
        attributes.put("reviewerId", getReviewerId());
        attributes.put("name", getName());
        attributes.put("text", getText());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long reviewId = (Long) attributes.get("reviewId");

        if (reviewId != null) {
            setReviewId(reviewId);
        }

        Long reviewerId = (Long) attributes.get("reviewerId");

        if (reviewerId != null) {
            setReviewerId(reviewerId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String text = (String) attributes.get("text");

        if (text != null) {
            setText(text);
        }
    }

    @JSON
    @Override
    public long getReviewId() {
        return _reviewId;
    }

    @Override
    public void setReviewId(long reviewId) {
        _reviewId = reviewId;
    }

    @JSON
    @Override
    public long getReviewerId() {
        return _reviewerId;
    }

    @Override
    public void setReviewerId(long reviewerId) {
        _reviewerId = reviewerId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getText() {
        if (_text == null) {
            return StringPool.BLANK;
        } else {
            return _text;
        }
    }

    @Override
    public void setText(String text) {
        _text = text;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Review.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Review toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Review) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ReviewImpl reviewImpl = new ReviewImpl();

        reviewImpl.setReviewId(getReviewId());
        reviewImpl.setReviewerId(getReviewerId());
        reviewImpl.setName(getName());
        reviewImpl.setText(getText());

        reviewImpl.resetOriginalValues();

        return reviewImpl;
    }

    @Override
    public int compareTo(Review review) {
        long primaryKey = review.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Review)) {
            return false;
        }

        Review review = (Review) obj;

        long primaryKey = review.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Review> toCacheModel() {
        ReviewCacheModel reviewCacheModel = new ReviewCacheModel();

        reviewCacheModel.reviewId = getReviewId();

        reviewCacheModel.reviewerId = getReviewerId();

        reviewCacheModel.name = getName();

        String name = reviewCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            reviewCacheModel.name = null;
        }

        reviewCacheModel.text = getText();

        String text = reviewCacheModel.text;

        if ((text != null) && (text.length() == 0)) {
            reviewCacheModel.text = null;
        }

        return reviewCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{reviewId=");
        sb.append(getReviewId());
        sb.append(", reviewerId=");
        sb.append(getReviewerId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", text=");
        sb.append(getText());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.mir.news.model.Review");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>reviewId</column-name><column-value><![CDATA[");
        sb.append(getReviewId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reviewerId</column-name><column-value><![CDATA[");
        sb.append(getReviewerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>text</column-name><column-value><![CDATA[");
        sb.append(getText());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
