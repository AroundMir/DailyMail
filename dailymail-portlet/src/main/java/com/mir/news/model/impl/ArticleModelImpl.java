package com.mir.news.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.mir.news.model.Article;
import com.mir.news.model.ArticleModel;
import com.mir.news.model.ArticleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Article service. Represents a row in the &quot;article&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.mir.news.model.ArticleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ArticleImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ArticleImpl
 * @see com.mir.news.model.Article
 * @see com.mir.news.model.ArticleModel
 * @generated
 */
@JSON(strict = true)
public class ArticleModelImpl extends BaseModelImpl<Article>
    implements ArticleModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a article model instance should use the {@link com.mir.news.model.Article} interface instead.
     */
    public static final String TABLE_NAME = "article";
    public static final Object[][] TABLE_COLUMNS = {
            { "articleId", Types.BIGINT },
            { "authorId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "text_", Types.VARCHAR },
            { "date_", Types.TIMESTAMP },
            { "status", Types.VARCHAR },
            { "editorComment", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table article (articleId LONG not null primary key,authorId LONG,name VARCHAR(75) null,text_ VARCHAR(75) null,date_ DATE null,status VARCHAR(75) null,editorComment VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table article";
    public static final String ORDER_BY_JPQL = " ORDER BY article.articleId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY article.articleId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.mir.news.model.Article"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.mir.news.model.Article"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final String MAPPING_TABLE_DAILYMAIL_ARTICLES_REVIEWS_NAME = "dailymail_Articles_Reviews";
    public static final Object[][] MAPPING_TABLE_DAILYMAIL_ARTICLES_REVIEWS_COLUMNS =
        {
            { "articleId", Types.BIGINT },
            { "reviewId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_DAILYMAIL_ARTICLES_REVIEWS_SQL_CREATE =
        "create table dailymail_Articles_Reviews (articleId LONG not null,reviewId LONG not null,primary key (articleId, reviewId))";
    public static final boolean FINDER_CACHE_ENABLED_DAILYMAIL_ARTICLES_REVIEWS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.dailymail_Articles_Reviews"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.mir.news.model.Article"));
    private static ClassLoader _classLoader = Article.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Article.class
        };
    private long _articleId;
    private long _authorId;
    private String _name;
    private String _text;
    private Date _date;
    private String _status;
    private String _editorComment;
    private Article _escapedModel;

    public ArticleModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Article toModel(ArticleSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Article model = new ArticleImpl();

        model.setArticleId(soapModel.getArticleId());
        model.setAuthorId(soapModel.getAuthorId());
        model.setName(soapModel.getName());
        model.setText(soapModel.getText());
        model.setDate(soapModel.getDate());
        model.setStatus(soapModel.getStatus());
        model.setEditorComment(soapModel.getEditorComment());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Article> toModels(ArticleSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Article> models = new ArrayList<Article>(soapModels.length);

        for (ArticleSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _articleId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setArticleId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _articleId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Article.class;
    }

    @Override
    public String getModelClassName() {
        return Article.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("articleId", getArticleId());
        attributes.put("authorId", getAuthorId());
        attributes.put("name", getName());
        attributes.put("text", getText());
        attributes.put("date", getDate());
        attributes.put("status", getStatus());
        attributes.put("editorComment", getEditorComment());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long articleId = (Long) attributes.get("articleId");

        if (articleId != null) {
            setArticleId(articleId);
        }

        Long authorId = (Long) attributes.get("authorId");

        if (authorId != null) {
            setAuthorId(authorId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String text = (String) attributes.get("text");

        if (text != null) {
            setText(text);
        }

        Date date = (Date) attributes.get("date");

        if (date != null) {
            setDate(date);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        String editorComment = (String) attributes.get("editorComment");

        if (editorComment != null) {
            setEditorComment(editorComment);
        }
    }

    @JSON
    @Override
    public long getArticleId() {
        return _articleId;
    }

    @Override
    public void setArticleId(long articleId) {
        _articleId = articleId;
    }

    @JSON
    @Override
    public long getAuthorId() {
        return _authorId;
    }

    @Override
    public void setAuthorId(long authorId) {
        _authorId = authorId;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getText() {
        if (_text == null) {
            return StringPool.BLANK;
        } else {
            return _text;
        }
    }

    @Override
    public void setText(String text) {
        _text = text;
    }

    @JSON
    @Override
    public Date getDate() {
        return _date;
    }

    @Override
    public void setDate(Date date) {
        _date = date;
    }

    @JSON
    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @JSON
    @Override
    public String getEditorComment() {
        if (_editorComment == null) {
            return StringPool.BLANK;
        } else {
            return _editorComment;
        }
    }

    @Override
    public void setEditorComment(String editorComment) {
        _editorComment = editorComment;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Article.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Article toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Article) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ArticleImpl articleImpl = new ArticleImpl();

        articleImpl.setArticleId(getArticleId());
        articleImpl.setAuthorId(getAuthorId());
        articleImpl.setName(getName());
        articleImpl.setText(getText());
        articleImpl.setDate(getDate());
        articleImpl.setStatus(getStatus());
        articleImpl.setEditorComment(getEditorComment());

        articleImpl.resetOriginalValues();

        return articleImpl;
    }

    @Override
    public int compareTo(Article article) {
        long primaryKey = article.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Article)) {
            return false;
        }

        Article article = (Article) obj;

        long primaryKey = article.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Article> toCacheModel() {
        ArticleCacheModel articleCacheModel = new ArticleCacheModel();

        articleCacheModel.articleId = getArticleId();

        articleCacheModel.authorId = getAuthorId();

        articleCacheModel.name = getName();

        String name = articleCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            articleCacheModel.name = null;
        }

        articleCacheModel.text = getText();

        String text = articleCacheModel.text;

        if ((text != null) && (text.length() == 0)) {
            articleCacheModel.text = null;
        }

        Date date = getDate();

        if (date != null) {
            articleCacheModel.date = date.getTime();
        } else {
            articleCacheModel.date = Long.MIN_VALUE;
        }

        articleCacheModel.status = getStatus();

        String status = articleCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            articleCacheModel.status = null;
        }

        articleCacheModel.editorComment = getEditorComment();

        String editorComment = articleCacheModel.editorComment;

        if ((editorComment != null) && (editorComment.length() == 0)) {
            articleCacheModel.editorComment = null;
        }

        return articleCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{articleId=");
        sb.append(getArticleId());
        sb.append(", authorId=");
        sb.append(getAuthorId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", text=");
        sb.append(getText());
        sb.append(", date=");
        sb.append(getDate());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", editorComment=");
        sb.append(getEditorComment());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.mir.news.model.Article");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>articleId</column-name><column-value><![CDATA[");
        sb.append(getArticleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>authorId</column-name><column-value><![CDATA[");
        sb.append(getAuthorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>text</column-name><column-value><![CDATA[");
        sb.append(getText());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>date</column-name><column-value><![CDATA[");
        sb.append(getDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>editorComment</column-name><column-value><![CDATA[");
        sb.append(getEditorComment());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
